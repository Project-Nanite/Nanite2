#!/bin/bash

# Advanced AI Tools Integration Hook for Nanite Linux AI/ML - FIXED VERSION
# Creates desktop applications for advanced AI tools during BUILD TIME

set -e

echo "I: Setting up advanced AI tools (build-time integration)..."

# ==========================================
# FUNCTIONS DEFINED IN MAIN SCRIPT (NOT IN EOF BLOCK)
# ==========================================

# Create desktop integration during BUILD
create_desktop_integration() {
    echo "I: Creating desktop integration in /usr/share/applications..."
    
    # Ollama desktop file
    cat > /usr/share/applications/ollama.desktop << 'EOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=Ollama
Comment=Local Large Language Model Runner
Exec=x-terminal-emulator --title="Ollama" --command="bash -c 'ollama-start; echo; echo \"Press Enter to close...\"; read'"
Icon=applications-science
Terminal=true
StartupNotify=true
Categories=Development;AI-Tools;Science;
Keywords=ollama;llm;ai;local;language;model;
EOF
    
    # tgpt desktop file
    cat > /usr/share/applications/tgpt.desktop << 'EOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=Terminal GPT
Comment=Fast and feature-rich terminal ChatGPT client
Exec=x-terminal-emulator --title="Terminal GPT" --command="bash -c 'echo \"🤖 Terminal GPT - Type your question:\"; tgpt -i'"
Icon=utilities-terminal
Terminal=true
StartupNotify=true
Categories=Network;AI-Tools;ConsoleOnly;
Keywords=tgpt;chatgpt;ai;terminal;cli;gpt;
EOF
    
    # Gemini CLI desktop file
    cat > /usr/share/applications/gemini-cli.desktop << 'EOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=Gemini CLI
Comment=Google Gemini command-line interface
Exec=x-terminal-emulator --title="Gemini CLI" --command="bash -c 'echo \"🔹 Google Gemini CLI Usage:\"; echo \"  gemini chat \\\"What is AI?\\\"\"; echo \"  gemini generate \\\"Write a Python function\\\"\"; echo; echo \"Press Enter to close...\"; read'"
Icon=google-chrome
Terminal=true
StartupNotify=true
Categories=Network;AI-Tools;ConsoleOnly;
Keywords=gemini;google;ai;cli;command;line;
EOF
    
    # Cursor AI desktop file
    cat > /usr/share/applications/cursor-ai.desktop << 'EOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=Cursor AI
Comment=AI-Powered Code Editor
Exec=cursor-ai %F
Icon=text-editor
Terminal=false
StartupNotify=true
Categories=Development;TextEditor;AI-Tools;
Keywords=cursor;ai;editor;code;development;programming;
MimeType=text/plain;text/x-chdr;text/x-csrc;text/x-c++hdr;text/x-c++src;text/x-java;text/x-dsrc;text/x-pascal;text/x-perl;text/x-python;application/x-php;application/x-httpd-php3;application/x-httpd-php4;application/x-httpd-php5;application/xml;text/html;text/css;text/x-sql;text/x-diff;
EOF
    
    # Set safe permissions
    chmod 644 /usr/share/applications/ollama.desktop 2>/dev/null || true
    chmod 644 /usr/share/applications/tgpt.desktop 2>/dev/null || true
    chmod 644 /usr/share/applications/gemini-cli.desktop 2>/dev/null || true
    chmod 644 /usr/share/applications/cursor-ai.desktop 2>/dev/null || true
    
    echo "✅ Desktop integration created during build"
}

# Create AI terminal launcher during BUILD
create_ai_terminal_launcher() {
    echo "I: Creating AI terminal launcher..."
    
    cat > /usr/local/bin/ai-terminal << 'EOF'
#!/bin/bash
# AI Terminal Tools Launcher

echo "🤖 AI Terminal Tools"
echo "==================="
echo ""
echo "Available AI tools:"
echo "1. Ollama (Local LLM)"
echo "2. tgpt (Terminal GPT)"
echo "3. Gemini CLI"
echo "4. All tools menu"
echo "5. Exit"
echo ""

read -p "Choose option (1-5): " choice

case $choice in
    1)
        echo "🦙 Starting Ollama..."
        if command -v ollama >/dev/null 2>&1; then
            ollama-start
            echo ""
            echo "✅ Ollama started. Try: ollama run llama3.2:1b"
            echo "Press Enter to close..."
            read
        else
            echo "❌ Ollama not installed. Run 'install-advanced-ai-tools'"
            echo "Press Enter to close..."
            read
        fi
        ;;
    2)
        echo "💬 Starting Terminal GPT..."
        if command -v tgpt >/dev/null 2>&1; then
            echo "Type your question or 'exit' to quit:"
            tgpt -i
        else
            echo "❌ tgpt not installed. Run 'install-advanced-ai-tools'"
            echo "Press Enter to close..."
            read
        fi
        ;;
    3)
        echo "🔹 Gemini CLI Usage:"
        echo "  gemini chat \"What is machine learning?\""
        echo "  gemini generate \"Write a Python function\""
        echo ""
        if command -v gemini >/dev/null 2>&1; then
            echo "✅ Gemini CLI is installed"
        else
            echo "❌ Gemini CLI not installed. Run 'install-advanced-ai-tools'"
        fi
        echo "Press Enter to close..."
        read
        ;;
    4)
        if command -v ai-quick-access >/dev/null 2>&1; then
            ai-quick-access
        else
            echo "❌ AI tools menu not available"
            echo "Press Enter to close..."
            read
        fi
        ;;
    5)
        exit 0
        ;;
    *)
        echo "❌ Invalid choice"
        echo "Press Enter to close..."
        read
        ;;
esac
EOF
    
    chmod +x /usr/local/bin/ai-terminal
    
    # Create desktop file for AI terminal
    cat > /usr/share/applications/ai-terminal.desktop << 'EOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=AI Terminal Tools
Comment=Terminal-based AI tools launcher
Exec=x-terminal-emulator --title="AI Terminal Tools" --command="ai-terminal"
Icon=utilities-terminal
Terminal=true
StartupNotify=true
Categories=System;AI-Tools;ConsoleOnly;
Keywords=ai;terminal;cli;tools;launcher;
EOF
    
    chmod 644 /usr/share/applications/ai-terminal.desktop 2>/dev/null || true
    
    echo "✅ AI terminal launcher created during build"
}

# ==========================================
# BUILD-TIME EXECUTION (FUNCTIONS CALLED HERE)
# ==========================================

# Call functions during BUILD to create desktop files
echo "📱 Creating AI tools desktop integration during build..."
create_desktop_integration
create_ai_terminal_launcher

# ==========================================
# CREATE USER INSTALLER SCRIPT (FIXED VERSION)
# ==========================================

cat > /usr/local/bin/install-advanced-ai-tools << 'EOF'
#!/bin/bash
# Advanced AI Tools Installer for Nanite Linux - RUNTIME VERSION

set -e

echo "🤖 Advanced AI Tools Installer"
echo "============================="

# Robust functions with proper error handling
show_progress() {
    echo "📋 $1"
}

show_success() {
    echo "✅ $1"
    if command -v notify-send >/dev/null 2>&1; then
        notify-send "AI Tools" "$1" -i applications-science 2>/dev/null || true
    fi
}

show_error() {
    echo "❌ ERROR: $1" >&2
    if command -v zenity >/dev/null 2>&1; then
        zenity --error --title="AI Tools Installation Error" --text="$1" 2>/dev/null || true
    fi
}

# Robust internet check
check_internet() {
    echo "🌐 Checking internet connection..."
    if ping -c 1 -W 5 google.com >/dev/null 2>&1; then
        echo "✅ Internet connection available"
        return 0
    else
        show_error "No internet connection. Please connect to the internet and try again."
        return 1
    fi
}

# Install Ollama with improved error handling
install_ollama() {
    show_progress "Installing Ollama (Local LLM Runner)..."
    
    if command -v ollama >/dev/null 2>&1; then
        show_success "Ollama already installed"
        return 0
    fi
    
    # Download and install Ollama
    if curl -fsSL https://ollama.com/install.sh | sh; then
        # Create improved Ollama startup script
        cat > /usr/local/bin/ollama-start << 'OLLAMA_EOF'
#!/bin/bash
# Start Ollama service with robust error handling

echo "🚀 Starting Ollama service..."

# Start Ollama in background
OLLAMA_HOST=127.0.0.1:11434 ollama serve &
OLLAMA_PID=$!

echo "Ollama PID: $OLLAMA_PID"
echo "Waiting for Ollama to be ready..."

# Robust startup check with timeout
for i in {1..30}; do
    if curl -s --head http://127.0.0.1:11434 >/dev/null 2>&1; then
        echo "✅ Ollama service started successfully"
        echo "🌐 Web interface: http://127.0.0.1:11434"
        
        # Pull a lightweight model if none exists
        if ! ollama list 2>/dev/null | grep -q "llama"; then
            echo "📦 Pulling llama3.2:1b model (lightweight)..."
            ollama pull llama3.2:1b
        fi
        
        echo ""
        echo "🎯 Try these commands:"
        echo "  ollama run llama3.2:1b"
        echo "  ollama list"
        echo ""
        return 0
    fi
    sleep 1
done

echo "❌ Failed to start Ollama service after 30 seconds"
kill $OLLAMA_PID 2>/dev/null || true
return 1
OLLAMA_EOF
        
        chmod +x /usr/local/bin/ollama-start
        show_success "Ollama installed successfully"
    else
        show_error "Failed to install Ollama"
        return 1
    fi
}

# Install tgpt
install_tgpt() {
    show_progress "Installing tgpt (Terminal GPT Client)..."
    
    if command -v tgpt >/dev/null 2>&1; then
        show_success "tgpt already installed"
        return 0
    fi
    
    if curl -sSL https://raw.githubusercontent.com/aandrew-me/tgpt/main/install | bash -s /usr/local/bin; then
        chmod +x /usr/local/bin/tgpt
        show_success "tgpt installed successfully"
    else
        show_error "Failed to install tgpt"
        return 1
    fi
}

# Install Gemini CLI
install_gemini_cli() {
    show_progress "Installing Google Gemini CLI..."
    
    if command -v gemini >/dev/null 2>&1; then
        show_success "Gemini CLI already installed"
        return 0
    fi
    
    if ! command -v npm >/dev/null 2>&1; then
        show_error "Node.js/npm not found. Please install Node.js first."
        return 1
    fi
    
    if npm install -g @google/gemini-cli; then
        show_success "Gemini CLI installed successfully"
    else
        show_error "Failed to install Gemini CLI"
        return 1
    fi
}

# Install Cursor AI with dynamic URL detection
install_cursor_ai() {
    show_progress "Installing Cursor AI (AI-Powered Editor)..."
    
    if [ -f /opt/ai-tools/Cursor.AppImage ]; then
        show_success "Cursor AI already installed"
        return 0
    fi
    
    mkdir -p /opt/ai-tools
    cd /opt/ai-tools
    
    # Try to get latest version, fallback to known working version
    CURSOR_URL="https://downloader.cursor.sh/linux/x64/latest"
    if ! curl -L --head "$CURSOR_URL" >/dev/null 2>&1; then
        CURSOR_URL="https://downloads.cursor.com/production/af58d92614edb1f72bdd756615d131bf8dfa5299/linux/x64/Cursor-1.4.5-x86_64.AppImage"
    fi
    
    if curl -L -o Cursor.AppImage "$CURSOR_URL"; then
        chmod +x Cursor.AppImage
        
        # Create improved Cursor launcher with proper X11 handling
        cat > /usr/local/bin/cursor-ai << 'CURSOR_EOF'
#!/bin/bash
# Cursor AI Launcher with robust root compatibility

cd /opt/ai-tools

if [ "$EUID" -eq 0 ]; then
    echo "🔧 Launching Cursor AI with root user compatibility..."
    
    # Find the real user who owns the display
    REAL_USER=$(who | grep "(:0)" | awk '{print $1}' | head -1)
    
    if [ -z "$REAL_USER" ]; then
        # Fallback: use root with safe flags
        echo "⚠️ No display user found, running as root with safety flags..."
        ./Cursor.AppImage --no-sandbox --disable-gpu-sandbox --user-data-dir=/root/.cursor-root &
        exit 0
    fi
    
    USER_HOME=$(getent passwd "$REAL_USER" | cut -d: -f6)
    XAUTH_FILE="$USER_HOME/.Xauthority"
    
    # Create or use existing non-root user for Cursor
    if ! id -u nanite-user >/dev/null 2>&1; then
        useradd -m -s /bin/bash -G sudo,audio,video,plugdev,netdev nanite-user 2>/dev/null || true
        echo "nanite-user:nanite" | chpasswd 2>/dev/null || true
        
        # Copy AI/ML projects to user
        if [ -d /root/AI-ML-Projects ]; then
            cp -r /root/AI-ML-Projects /home/nanite-user/ 2>/dev/null || true
            chown -R nanite-user:nanite-user /home/nanite-user/AI-ML-Projects 2>/dev/null || true
        fi
    fi
    
    # Launch as nanite-user with proper display
    sudo -u nanite-user -H bash -c "
        export DISPLAY=:0
        export XAUTHORITY='$XAUTH_FILE'
        cd /home/nanite-user/AI-ML-Projects 2>/dev/null || cd /home/nanite-user
        /opt/ai-tools/Cursor.AppImage --no-sandbox --disable-gpu-sandbox
    " &
else
    # Not running as root - launch normally
    ./Cursor.AppImage "$@" &
fi
CURSOR_EOF
        
        chmod +x /usr/local/bin/cursor-ai
        show_success "Cursor AI installed successfully"
    else
        show_error "Failed to download Cursor AI"
        return 1
    fi
}

# Main installation function (for runtime use)
main_installer() {
    echo "This will install advanced AI tools:"
    echo "  • Ollama (Local LLM Runner)"  
    echo "  • tgpt (Terminal GPT Client)"
    echo "  • Gemini CLI (Google's AI CLI)"
    echo "  • Cursor AI (AI Code Editor)"
    echo ""
    
    if [ "$EUID" -ne 0 ]; then
        echo "⚠️ This script requires root privileges"
        echo "   Running with sudo..."
        exec sudo "$0" "$@"
    fi
    
    # Check internet
    if ! check_internet; then
        return 1
    fi
    
    echo "🚀 Starting installation..."
    
    # Install each tool with error handling
    install_ollama || echo "⚠️ Ollama installation failed"
    install_tgpt || echo "⚠️ tgpt installation failed"
    install_gemini_cli || echo "⚠️ Gemini CLI installation failed"
    install_cursor_ai || echo "⚠️ Cursor AI installation failed"
    
    # Update desktop database
    if command -v update-desktop-database >/dev/null 2>&1; then
        update-desktop-database /usr/share/applications 2>/dev/null || true
    fi
    
    echo ""
    echo "🎉 Advanced AI tools installation completed!"
    echo ""
    echo "📋 Available tools:"
    echo "   • Find all tools in Applications → AI Tools"
    echo "   • Run 'ai-terminal' for terminal tools"
    echo "   • Check desktop shortcuts"
    echo ""
    echo "🔄 Please log out and back in to see all changes"
}

# Execute the installer
main_installer "$@"
EOF

chmod +x /usr/local/bin/install-advanced-ai-tools

# ==========================================
# BUILD-TIME EXECUTION
# ==========================================

# Execute functions during BUILD to create desktop files
create_desktop_integration
create_ai_terminal_launcher

# Create desktop shortcuts in skeleton for new users
echo "🖥️ Creating desktop shortcuts for users..."

# Ollama desktop shortcut
cat > /etc/skel/Desktop/ollama.desktop << 'EOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=🦙 Ollama
Comment=Local Large Language Model Runner
Exec=x-terminal-emulator --title="Ollama" --command="bash -c 'if command -v ollama >/dev/null 2>&1; then ollama-start; else echo \"Installing Ollama...\"; x-terminal-emulator --command=\"install-advanced-ai-tools\"; fi'"
Icon=applications-science
Terminal=true
StartupNotify=true
Categories=Development;AI-Tools;Science;
Keywords=ollama;llm;ai;local;language;model;
EOF

# Terminal GPT desktop shortcut
cat > /etc/skel/Desktop/terminal-gpt.desktop << 'EOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=💬 Terminal GPT
Comment=Fast terminal ChatGPT client
Exec=x-terminal-emulator --title="Terminal GPT" --command="bash -c 'if command -v tgpt >/dev/null 2>&1; then echo \"🤖 Terminal GPT Ready\"; tgpt -i; else echo \"Installing tgpt...\"; x-terminal-emulator --command=\"install-advanced-ai-tools\"; fi'"
Icon=utilities-terminal
Terminal=true
StartupNotify=true
Categories=Network;AI-Tools;ConsoleOnly;
Keywords=tgpt;chatgpt;ai;terminal;cli;gpt;
EOF

# Cursor AI desktop shortcut
cat > /etc/skel/Desktop/cursor-ai.desktop << 'EOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=✨ Cursor AI
Comment=AI-Powered Code Editor
Exec=bash -c 'if command -v cursor-ai >/dev/null 2>&1; then cursor-ai; else zenity --question --text="Cursor AI not installed. Install now?" && x-terminal-emulator --command="install-advanced-ai-tools" || true; fi'
Icon=text-editor
Terminal=false
StartupNotify=true
Categories=Development;TextEditor;AI-Tools;
Keywords=cursor;ai;editor;code;development;programming;
EOF

# Advanced AI tools installer shortcut
cat > /etc/skel/Desktop/install-advanced-ai-tools.desktop << 'EOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=🚀 Install Advanced AI Tools
Comment=Install Ollama, tgpt, Gemini CLI, and Cursor AI
Exec=x-terminal-emulator --title="Advanced AI Tools Installation" --command="install-advanced-ai-tools"
Icon=system-software-install
Terminal=true
StartupNotify=true
Categories=System;Development;AI-Tools;
Keywords=ai;tools;install;ollama;tgpt;gemini;cursor;
EOF

# Set safe permissions for skeleton desktop files
chmod +x /etc/skel/Desktop/ollama.desktop 2>/dev/null || true
chmod +x /etc/skel/Desktop/terminal-gpt.desktop 2>/dev/null || true
chmod +x /etc/skel/Desktop/cursor-ai.desktop 2>/dev/null || true
chmod +x /etc/skel/Desktop/install-advanced-ai-tools.desktop 2>/dev/null || true

# Create comprehensive AI tools status checker
cat > /usr/local/bin/check-advanced-ai-tools << 'EOF'
#!/bin/bash
# Check status of advanced AI tools

echo "🤖 Advanced AI Tools Status"
echo "============================"

tools=("ollama" "tgpt" "gemini" "cursor-ai")
installed=0
total=${#tools[@]}

for tool in "${tools[@]}"; do
    if command -v "$tool" >/dev/null 2>&1; then
        echo "✅ $tool: Installed"
        ((installed++))
    else
        echo "❌ $tool: Not installed"
    fi
done

echo ""
echo "📊 Summary: $installed/$total tools installed"

if [ $installed -lt $total ]; then
    echo ""
    echo "💡 To install missing tools: install-advanced-ai-tools"
fi

echo ""
echo "🖥️ Desktop Integration:"
if [ -d /root/Desktop ]; then
    desktop_count=$(ls /root/Desktop/*.desktop 2>/dev/null | wc -l)
    echo "  Desktop shortcuts: $desktop_count available"
else
    echo "  Desktop shortcuts: Available in Applications menu"
fi
EOF

chmod +x /usr/local/bin/check-advanced-ai-tools

echo "I: Advanced AI tools integration completed!"
echo "   ✅ Desktop applications created during BUILD"
echo "   ✅ Installation script prepared for users"
echo "   ✅ Desktop shortcuts created in skeleton"
echo "   ✅ All applications accessible from menu"
echo "   ✅ Robust error handling implemented"
echo "   ✅ Portable terminal usage (x-terminal-emulator)"
